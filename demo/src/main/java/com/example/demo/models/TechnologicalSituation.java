package com.example.demo.models;


import com.example.demo.models.Details.Detail;
import com.example.demo.models.Machine.Machine;
import com.example.demo.models.Process.ProcessingMethod;
import com.example.demo.models.Process.ProcessingType;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "technological_situation")
@Data
public class TechnologicalSituation {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // üîó –î–µ—Ç–∞–ª—å
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "detail_id", nullable = false)
    private Detail detail;

    // üîó –°—Ç–∞–Ω–æ–∫
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "machine_id", nullable = false)
    private Machine machine;

    // üîó –ú–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "processing_method_id", nullable = false)
    private ProcessingMethod processingMethod;

    // üîó –¢–∏–ø –æ–±—Ä–æ–±–∫–∏ (leaf –≤—É–∑–æ–ª –¥–µ—Ä–µ–≤–∞)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "processing_type_id", nullable = false)
    private ProcessingType processingType;

    // üîó –¢–∏–ø –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è (–æ–ø—Ü—ñ–π–Ω–æ)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cooling_type_id")
    private CoolingType coolingType;

    // üîó –í–∏–¥ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è (–æ–ø—Ü—ñ–π–Ω–æ)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cooling_method_id")
    private CoolingMethod coolingMethod;

    // üîó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ —Ä—ñ—à–µ–Ω–Ω—è
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

}
