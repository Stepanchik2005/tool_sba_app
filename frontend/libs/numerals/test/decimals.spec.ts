// from .errors import RangeError
import { inflect } from "../src/decimals.js"
import { strict as assert } from "assert"
import { fm } from "./utils.js"

describe("Ordinals", () => {

    describe("gov_agreement", () => {
        it("<>", () => { assert.equal(inflect("", "1", fm("m")), "одна́ деся́та")})
        it("<>", () => { assert.equal(inflect("", "2", fm("m")), "дві́ деся́тих")})
        it("<>", () => { assert.equal(inflect("", "3", fm("m")), "три́ деся́тих")})
        it("<>", () => { assert.equal(inflect("", "5", fm("m")), "пʼя́ть деся́тих")})
        it("<>", () => { assert.equal(inflect("", "0", fm("m")), "ну́ль деся́тих")})
    
    })

    describe("test_range_fallback", () => {
        it("<>", () => { assert.equal(inflect("", "99999999999999999999999999", fm("m")), "девʼяно́сто де́вʼять септильйо́нів девʼятсо́т девʼяно́сто де́вʼять секстильйо́нів девʼятсо́т девʼяно́сто де́вʼять квінтильйо́нів девʼятсо́т девʼяно́сто де́вʼять квадрильйо́нів девʼятсо́т девʼяно́сто де́вʼять трильйо́нів девʼятсо́т девʼяно́сто де́вʼять мілья́рдів девʼятсо́т девʼяно́сто де́вʼять мільйо́нів девʼятсо́т девʼяно́сто де́вʼять ти́сяч девʼятсо́т девʼяно́сто де́вʼять стасептильйо́нних" )})
        it("<>", () => { assert.equal(inflect("", "00000000000000000000000001", fm("m")), "одна́ стасептильйо́нна" )})
        it("<>", () => { assert.equal(inflect("", "100000000000000000000000000", fm("m")), "сто́ септильйо́нів оди́н ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль нульови́х" )})
        it("<>", () => { assert.equal(inflect("", "000000000000000000000000001", fm("m")), "одна́ оди́н ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль нульова́" )})
        it("<>", () => { assert.equal(inflect("", "1000000000000000000000000000", fm("m")), "оди́н ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль оди́н ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль ну́ль нульова́" )})
    })
    describe("strict_range", () => {
        it("return when no overflow", () => { assert.doesNotThrow(
            () => inflect("", "99999999999999999999999999", fm("m"), false, true))})
        it("throw when overflow", ()=>{ assert.throws(
            () => inflect("", "100000000000000000000000000", fm("m"), false, true))})
    })
    describe("whole_inflect", () => {
        it("<>", () => { assert.equal(inflect("0", "1", fm("m")), "ну́ль ці́лих одна́ деся́та" ) })
        it("<>", () => { assert.equal(inflect("2", "4", fm("m")), "дві́ ці́лих чоти́ри деся́тих" ) })
        it("<>", () => { assert.equal(inflect("5", "8", fm("m")), "пʼя́ть ці́лих ві́сім деся́тих" ) })

    })
})
